c     <#Vars> <#Clauses>
p cnf 2000     244
880 0
883 0
886 0
-881 0
-882 0
-884 0
-885 0
-887 0
-888 0
889 0
892 0
896 0
-890 0
-891 0
-893 0
-894 0
-895 0
-897 0
898 0
901 0
906 0
-899 0
-900 0
-902 0
-903 0
-904 0
-905 0
907 0
911 0
913 0
-908 0
-909 0
-910 0
-912 0
-914 0
-915 0
916 0
920 0
923 0
-917 0
-918 0
-919 0
-921 0
-922 0
-924 0
925 0
929 0
933 0
-926 0
-927 0
-928 0
-930 0
-931 0
-932 0
934 0
939 0
940 0
-935 0
-936 0
-937 0
-938 0
-941 0
-942 0
943 0
948 0
950 0
-944 0
-945 0
-946 0
-947 0
-949 0
-951 0
952 0
957 0
960 0
-953 0
-954 0
-955 0
-956 0
-958 0
-959 0
962 0
964 0
967 0
-961 0
-963 0
-965 0
-966 0
-968 0
-969 0
971 0
973 0
977 0
-970 0
-972 0
-974 0
-975 0
-976 0
-978 0
980 0
982 0
987 0
-979 0
-981 0
-983 0
-984 0
-985 0
-986 0
989 0
992 0
994 0
-988 0
-990 0
-991 0
-993 0
-995 0
-996 0
998 0
1001 0
1004 0
-997 0
-999 0
-1000 0
-1002 0
-1003 0
-1005 0
1007 0
1010 0
1014 0
-1006 0
-1008 0
-1009 0
-1011 0
-1012 0
-1013 0
1016 0
1020 0
1021 0
-1015 0
-1017 0
-1018 0
-1019 0
-1022 0
-1023 0
1025 0
1029 0
1031 0
-1024 0
-1026 0
-1027 0
-1028 0
-1030 0
-1032 0
1034 0
1038 0
1041 0
-1033 0
-1035 0
-1036 0
-1037 0
-1039 0
-1040 0
1044 0
1045 0
1048 0
-1042 0
-1043 0
-1046 0
-1047 0
-1049 0
-1050 0
1053 0
1054 0
1058 0
-1051 0
-1052 0
-1055 0
-1056 0
-1057 0
-1059 0
1062 0
1063 0
1068 0
-1060 0
-1061 0
-1064 0
-1065 0
-1066 0
-1067 0
1071 0
1073 0
1075 0
-1069 0
-1070 0
-1072 0
-1074 0
-1076 0
-1077 0
1080 0
1082 0
1085 0
-1078 0
-1079 0
-1081 0
-1083 0
-1084 0
-1086 0
1089 0
1091 0
1095 0
-1087 0
-1088 0
-1090 0
-1092 0
-1093 0
-1094 0
1098 0
1101 0
1102 0
-1096 0
-1097 0
-1099 0
-1100 0
-1103 0
-1104 0
1107 0
1110 0
1112 0
-1105 0
-1106 0
-1108 0
-1109 0
-1111 0
-1113 0
1116 0
1119 0
1122 0
-1114 0
-1115 0
-1117 0
-1118 0
-1120 0
-1121 0
2000 0
c kctlsinglestate <KripkeID> <#Nodes> <#Processes> <States/Process> <selfloops> <ctlvar> <CTL formula>"
kctlsinglestate   0          30       3            3                0           2000     (NCS1 AND NCS2)
AND NCS3
c
c 2. Mutual exclusion
AND AG NOT (CS1 AND (CS2 OR CS3))
AND AG NOT (CS2 AND CS3)
c
c 3. If one enters the try section, one is guaranteed to eventually enter the critical section
AND AG (NOT TRY1 OR AF CS1)
AND AG (NOT TRY2 OR AF CS2)
AND AG (NOT TRY3 OR AF CS3)
c
c 4. encoding: each process is in exactly one of states {NCS,TRY,CS}
c
c 5. NCS process can enter the try section
AND AG (NOT NCS1 OR EX TRY1)
AND AG (NOT NCS2 OR EX TRY2)
AND AG (NOT NCS3 OR EX TRY3)
c
c 6. we ommit EXi True, since that is guaranteed in 9. for the product automaton. Basically this is similar to 5., but we do not require that eventually CSi is reached
AND AG (NOT TRY1 OR AX (CS1 OR TRY1))
AND AG (NOT TRY2 OR AX (CS2 OR TRY2))
AND AG (NOT TRY3 OR AX (CS3 OR TRY3))
c
c 7. Similar to 5.
AND AG (NOT CS1 OR EX NCS1)
AND AG (NOT CS2 OR EX NCS2)
AND AG (NOT CS3 OR EX NCS3)
c
c 8. if process one moves, process two does nothing
c
c
c
c 9. There is always a next state. We don't need that, since it is implicitly added to the formula
c AG EX True

